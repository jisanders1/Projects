<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ast Generator</name>
    </assembly>
    <members>
        <member name="T:Ast_Generator.GenerateAst">
            <summary>
            Represents the generation expression classes for Lox syntax trees.
            </summary>
        </member>
        <member name="M:Ast_Generator.GenerateAst.Main(System.String[])">
            <summary>
            Creates a new class that represents the grammar of Lox. Comment out when running main Lox class.
            </summary>
            <param name="args">Path oc new class.</param>
        </member>
        <member name="M:Ast_Generator.GenerateAst.DefineAst(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generates the script that represents an automatic syntax tree for the grammar of Lox.
            </summary>
            <param name="outputDir">Path of class relative to the current location.</param>
            <param name="baseName">Name of class/filename</param>
            <param name="types">List containing information about the types of </param>
        </member>
        <member name="M:Ast_Generator.GenerateAst.DefineVisitor(System.IO.StreamWriter,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generates interface for the Visitor pattern.
            </summary>
            <param name="writer">Writes text to the new class file.</param>
            <param name="baseName">Name that becomes part of interface methods.</param>
            <param name="types">List containing names of different expression types.</param>
        </member>
        <member name="M:Ast_Generator.GenerateAst.DefineType(System.IO.StreamWriter,System.String,System.String,System.String)">
            <summary>
            Generates subclasses of the syntax tree while implementing interface methods.
            </summary>
            <param name="writer">Writes text to the new class file.</param>
            <param name="baseName">Name that becomes the superclass for inheritance.</param>
            <param name="className">Name of the subclass.</param>
            <param name="fieldList">List of the fields for each subclass.</param>
        </member>
    </members>
</doc>
