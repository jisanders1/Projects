// LINES 1 - 15 WERE PRIOR EXPERIMENTS

//var language = "Spanish";
// this variable is just here

/*for (int i = 0; i < 10; i = i + 1) {
	print "Hello World!";
}*/
/* experimenting with
   multi-line* comment
   with extra extra / extra text. */

/* if (language == "Spanish" or !true) {
	print "I'm fine. I'm totally fine";
} */

// Chapter 7 Experiments
/*print "Shampoo";
print true;
print 2 + 1;*/

// Chapter 8 Experiments
/*var a = 1;
var b = 3;
print a + b;

a = 3;
print a + b;*/

// Testing Scope
/*var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;*/

// Chapter 9 Testing
/* var a = 0;
var temp;

if (a == 1) {
    print "a is 1";
} else if (a == 0) {
    print "a is 0";
} else {
    print "Uh something went wrong.";
}

for (var b = 1; a < 10000; b = temp + b) {
  print a;
  temp = a;
  a = b;
} */

// Chapter 10 Testing
// Test 1: Testing defining functions
/*fun sayHi(first, last) {
  print "Hi, " + first + " " + last + "!";
}

sayHi("Dear", "Reader");

// Test 2: Testing recursion, the return statement, and the native clock method.
fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

print "";

// testing the time function
var startTime = clock(); 
for (var i = 0; i < 20; i = i + 1) {
  print fib(i);
}
print clock() - startTime; // prints the elapsed time of the for loop executing function calls

print "";

// Test 3: Testing the closure
fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".*/

// Chapter 11 Testing
// Test 1: Ensuring closure bug does not happen.
// Should print:
// global
// global
/*var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}*/

// Test 2: Making sure an error is raised when a variable's name is in its initializer
// Should raise an error mentioning can't read local variable in its own initializer.
// Comment out in order to test other features
/* var a = "outer";
{
  var a = a;
} */

// Test 3: Making sure a user can't define the same variable twice within the same scope
// Should raise an error mentioning a variable already existing with this name in this scope
// Comment out in order to test other features
/*fun bad() {
  var a = "first";
  var a = "second";
}*/

// Test 4: Making sure top-level returns are not possible.
// Comment out in order to test other features
// Should raise an error referncing line 141 and mentioning you can't return from top-level code.
//return "Something like this";

// Chapter 12 Testing
// Test 1: ensuring class is being parsed correctly
class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // Prints "DevonshireCream".

// Test 2: Testing the instance class to make sure a new instance is actually created
class Bagel {}
var bagel = Bagel();
print bagel; // Prints "Bagel instance".

// Test 3: Ensuring class methods are parsed accurately
class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

Bacon().eat(); // Prints "Crunch crunch crunch!".

// Test 4: Ensuring the "this" keyword is bound and works correctly
class Cake {
  taste() {
    var adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); // Prints "The German chocolate cake is delicious!".

// Test 5: Ensuring users cannot use "this" outside of a class (comment out to test other features)
// Should throw 2 errors
/*print this;

fun notAMethod() {
  print this;
}*/

// Test 6: Testing initializer method inside of a class
class Foo {
  init() {
    print this;
  }
}

var foo = Foo();
print foo.init(); // Prints "Foo instance" 3 times, once for the the variable declaration, once for invoking it for printing, and once for invoking the intializer.